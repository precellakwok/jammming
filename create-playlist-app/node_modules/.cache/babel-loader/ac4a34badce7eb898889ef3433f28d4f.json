{"ast":null,"code":"const clientId = '769db8ea75f04f92b2fd66c48483b82d';\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\n    const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (hasAccessToken && hasExpiresIn) {\n      accessToken = hasAccessToken[1];\n      const expiresIn = Number(hasExpiresIn[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        console.log('API request failed');\n      }\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(jsonResponse => {\n      userId = jsonResponse.id; // Adds playlist to user's account\n\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: playlistName\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          console.log('API request failed');\n        }\n      }).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Jammming/create-playlist-app/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","hasAccessToken","window","location","href","match","hasExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","ok","json","console","log","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["const clientId = '769db8ea75f04f92b2fd66c48483b82d';\r\nconst redirectUri = 'http://localhost:3000/';\r\n \r\nlet accessToken;\r\n \r\n \r\nconst Spotify = {\r\n \r\n   getAccessToken() {\r\n       if(accessToken) {\r\n           return accessToken;\r\n       }\r\n       const hasAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n       const hasExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n       if (hasAccessToken && hasExpiresIn) {\r\n           accessToken = hasAccessToken[1];\r\n           const expiresIn = Number(hasExpiresIn[1]);\r\n           window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n           window.history.pushState('Access Token', null, '/');\r\n           return accessToken;\r\n       } else {\r\n           const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n           window.location = accessUrl;\r\n       }\r\n   },\r\n   search(term) {\r\n       const accessToken = Spotify.getAccessToken();\r\n       return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n           headers: {\r\n               Authorization: `Bearer ${accessToken}`\r\n           }\r\n       }).then(\r\n           response => {\r\n               if (response.ok) {\r\n                   return response.json();\r\n               } else {\r\n                   console.log('API request failed');\r\n               }\r\n       }).then(\r\n           jsonResponse => {\r\n           if(!jsonResponse.tracks) {\r\n               return [];\r\n           }\r\n           return jsonResponse.tracks.items.map(track => ({\r\n               id: track.id,\r\n               name: track.name,\r\n               artist: track.artists[0].name,\r\n               album: track.album.name,\r\n               uri: track.uri\r\n           }));\r\n       });\r\n   },\r\n   savePlaylist(playlistName, trackURIs) {\r\n \r\n       if (!playlistName || !trackURIs.length) {\r\n           return;\r\n       }\r\n       const accessToken = Spotify.getAccessToken();\r\n       const headers = {\r\n           Authorization: `Bearer ${accessToken}`\r\n       };\r\n       let userId;\r\n        return fetch('https://api.spotify.com/v1/me', {\r\n           headers: headers\r\n       }).then(\r\n           response => {\r\n               if(response.ok) {\r\n                   return response.json();\r\n               }\r\n       }).then(\r\n           jsonResponse => {\r\n               userId = jsonResponse.id;\r\n \r\n               // Adds playlist to user's account\r\n               return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                   headers: headers,\r\n                   method: 'POST',\r\n                   body: JSON.stringify({name: playlistName})\r\n               }).then(\r\n                   response => {\r\n                   if (response.ok) {\r\n                       return response.json();\r\n                   } else {\r\n                       console.log('API request failed');\r\n                   }\r\n               }).then(\r\n                   jsonResponse => {\r\n                       const playlistId = jsonResponse.id;\r\n                       return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                           headers: headers,\r\n                           method: 'POST',\r\n                           body: JSON.stringify({ uris: trackURIs})\r\n                       });\r\n                   });\r\n           });\r\n \r\n \r\n   }\r\n \r\n}\r\n \r\nexport default Spotify;\r\n"]},"metadata":{},"sourceType":"module"}